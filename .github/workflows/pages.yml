name: Build manifest & deploy to Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate manifest.json, app.json, and installer.json
        run: |
          python3 - <<'PY'
          import os, json, pathlib, time
          owner, repo = os.environ['GITHUB_REPOSITORY'].split('/', 1)
          sha  = os.environ['GITHUB_SHA']
          root = pathlib.Path('urc')

          urls = []
          if root.exists():
            for p in sorted(root.rglob('*')):
              if p.is_file():
                urls.append(f'https://raw.githubusercontent.com/{owner}/{repo}/{sha}/{p.as_posix()}')

          out = pathlib.Path('public'); out.mkdir(exist_ok=True)
          (out/'manifest.json').write_text(json.dumps(urls, indent=2))

          # app.json (version + stable manifest URL + commit)
          version = '0.0.0'
          pv = pathlib.Path('app_version.txt')
          if pv.exists(): version = pv.read_text().strip() or '0.0.0'
          app = {
            "version": version,
            "manifest_url": f"https://{owner}.github.io/{repo}/manifest.json",
            "commit": sha,
            "built_at": int(time.time())
          }
          (out/'app.json').write_text(json.dumps(app, indent=2))

          # installer.json (for self-updating installer.lua)
          version = '0.0.0'
          pv = pathlib.Path('installer_version.txt')
          if pv.exists(): version = pv.read_text().strip() or '0.0.0'
          inst_url = f'https://raw.githubusercontent.com/{owner}/{repo}/{sha}/install.lua'
          (out/'installer.json').write_text(json.dumps({"version": version, "url": inst_url}, indent=2))

          print(f"Wrote manifest.json ({len(urls)} files), app.json (v{version}), installer.json")
          PY

      # Prevent Jekyll from hiding anything
      - name: Add .nojekyll
        run: |
          mkdir -p public
          touch public/.nojekyll

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
  
  verify:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CDN & verify manifest is live
        env:
          OWNER: ${{ github.repository_owner }}
          REPO:  ${{ github.event.repository.name }}
        run: |
          URL="https://${OWNER}.github.io/${REPO}/manifest.json"
          echo "Probing $URL"
          for i in $(seq 1 30); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            if [ "$code" = "200" ]; then
              echo "OK: $URL is live"
              exit 0
            fi
            sleep 5
          done
          echo "Timed out waiting for $URL" >&2
          exit 1
